PACKAGE

package webfinger
    import "github.com/ant0ine/go-webfinger"

    Simple Client Implementation of WebFinger

    (This is a work in progress, the API is not frozen)

    This implementation tries to follow the last spec:
    http://tools.ietf.org/html/draft-ietf-appsawg-webfinger-05

    And also tries to provide backwark compatibility with the original spec:
    https://code.google.com/p/webfinger/wiki/WebFingerProtocol

    Example:

	package main
	import (
	        "fmt"
	        "github.com/ant0ine/go-webfinger"
	        "os"
	)
	func main() {
	        email := os.Args[1]
	        client := webfinger.Client{
	                EnableLegacyAPISupport: true,
	        }
	        resource, err := webfinger.MakeResource(email)
	        if err != nil {
	                panic(err)
	        }
	        jrd, err := client.GetJRD(resource)
	        if err != nil {
	                fmt.Println(err)
	                return
	        }
	        fmt.Printf("JRD: %+v", jrd)
	}

TYPES

type Client struct {
    EnableLegacyAPISupport bool
}
    WebFinger Client

func (self *Client) GetJRD(resource *Resource) (*jrd.JRD, error)
    Get the JRD data for this resource. It follows redirect, and retries
    with http if https is not available. If the response payload is in XRD,
    this method parses it and converts it to JRD. (see the xrd and jrd
    packages)

func (self *Client) GetJRDPart(resource *Resource, rels []string) (*jrd.JRD, error)
    Same as GetJRD, with the ability to specify which "rel" links to
    include.

func (self *Client) LegacyGetJRD(resource *Resource) (*jrd.JRD, error)
    Get the JRD data for this resource. Implement the original WebFinger
    API, ie: first fetch the Host metadata, find the LRDD link, fetch the
    resource data and convert the XRD in JRD if necessary.

func (self *Client) LegacyGetResourceJRDTemplateURL(domain string) (string, error)
    Given a domain, this method gets the host meta JRD data, and returns the
    LRDD resource JRD template URL. It tries all the urls returned by
    client.LegacyHostJRDURLs.

func (self *Client) LegacyHostJRDURLs(domain string) []string
    Build a serie of well known host JRD URLs from the domain

type Resource struct {
    Local  string
    Domain string
}
    WebFinger Resource

func MakeResource(email string) (*Resource, error)
    Parse the email string and return a *Resource

func (self *Resource) AsURIString() string
    Return the resource as an URI string (eg: acct:user@domain)

func (self *Resource) JRDURL(rels []string) *url.URL
    Generate the WebFinger URL that points to the JRD data for this
    resource.


SUBDIRECTORIES

	example
	jrd
	xrd

