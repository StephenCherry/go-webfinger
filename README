PACKAGE

package webfinger
    import "github.com/ant0ine/go-webfinger"

    Simple Client Implementation of WebFinger

    (This is a work in progress, the API is not frozen)

    This implementation tries to follow the last spec:
    http://tools.ietf.org/html/draft-ietf-appsawg-webfinger-04 And also
    tries to provide backwark compatibility with the original spec:
    https://code.google.com/p/webfinger/wiki/WebFingerProtocol

    Example:

	     import (
	         "fmt"
	         "github.com/ant0ine/go-webfinger"
	     )
		jrd, err := webfinger.GetUserJRD("user@host")
		if err != nil {
			panic(err)
		}
		fmt.Printf("User JRD: %+v", jrd)

FUNCTIONS

func FindJRD(urls []string) (*jrd.JRD, error)
    Try to call GetJRD on each url until a successful response.

func GetJRD(url string) (*jrd.JRD, error)
    Given an URL, get and parse the JRD. [Compat Note] If the payload is in
    XRD, this method parses it and converts it to JRD.

func GetUserJRD(email string) (*jrd.JRD, error)
    Try to discover the user JRD data from the email

func GetUserJRDTemplateURL(domain string) (string, error)
    Given a domain, this method gets the host meta JRD data, and returns the
    LRDD user JRD template URL.

func HostJRDURLs(domain string) []string
    Build a serie well known host JRD URLs from the domain [Compat Note]
    This includes URLs from previous versions of the spec.


TYPES

type EmailAddress struct {
    Local  string
    Domain string
}

func MakeEmailAddress(email string) (*EmailAddress, error)
    Parse the email string and return an *EmailAddress

func (self *EmailAddress) AsURI() string
    Return the email address as an URI (ie: acct:user@domain)


SUBDIRECTORIES

	example
	jrd
	xrd

